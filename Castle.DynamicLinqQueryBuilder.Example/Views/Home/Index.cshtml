@{
    ViewData["Title"] = "Home Page";
}
@section scripts
{
    <script>
    $(function() {
        // Handler for .ready() called.

        // Fix for Bootstrap Datepicker
        $('#jquery-query-builder').on('afterUpdateRuleValue.queryBuilder', function(e, rule) {
            if (rule.filter.plugin === 'datepicker') {
                rule.$el.find('.rule-value-container input').datepicker('update');
            }
        });

        var tableData = [];

        var filterDefinition = @Html.Raw(ViewBag.FilterDefinition);
        var customFilters = {
            condition: 'AND',
            rules: []
        };
        var jqueryQueryBuilder = $('#jquery-query-builder');
        var jqueryQueryBuilderDom = jqueryQueryBuilder.queryBuilder({
            plugins: [],
            //allow_groups: 0,
            allow_empty: true,
            filters: filterDefinition,
            rules: customFilters,
            icons: {
                add_group: 'fa fa-plus-square',
                add_rule: 'fa fa-plus-circle',
                remove_group: 'fa fa-minus-square',
                remove_rule: 'fa fa-minus-circle',
                error: 'fa fa-exclamation-triangle',
                sortable: 'fa fa-exclamation-triangle'
            }
        });

        var convertSingleValuesToArray = function (obj) {
            if (obj != null) {
                if (obj.hasOwnProperty("value")) {
                    if (Object.prototype.toString.call(obj.value) !== '[object Array]') {
                        obj.value = [obj.value];
                    }
                }
                if (obj.hasOwnProperty("rules") && obj.rules != null) {
                    for (var i = 0; i < obj.rules.length; i++) {
                        convertSingleValuesToArray(obj.rules[i]);
                    }
                }
            }
        }

        var getRules = function() {
            try {
                var res = jqueryQueryBuilder.queryBuilder('getRules');
                convertSingleValuesToArray(res);
                return res;
            } catch (ex) {
                return null;
            }
        }

        var buildTable;
        var filterData = function() {

            $.ajax({
                type: 'POST',
                url: "../Home/Index",
                data: JSON.stringify(getRules()),
                success: function (returnPayload) {
                    tableData = returnPayload;
                    buildTable();
                    console && console.log ("request succeeded");
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console && console.log ("request failed");
                },
                dataType: "json",
                contentType: "application/json",
                processData: false,
                async: true
            });
        }

        $('#applyFilter').on('click', function() {
            filterData();
        });
        buildTable = function() {
            var tbody = $('#data-table tbody'),
                props = ["firstName", "lastName", "birthday", "deceased", "address", "city", "state", "zipCode"];
            tbody.empty();
            $.each(tableData, function(i, reservation) {
                var tr = $('<tr>');
                    $.each(props, function (i, prop) {
                        var value = reservation[prop];
                        if (typeof value === "boolean") {
                            value = String(value); // Convert boolean to string
                        }
                        $('<td>').html(value).appendTo(tr);
                    });
                tbody.append(tr);
            });
        };

        filterData();



            $('.parse-json').on('click', function () {
                $('#result').removeClass('d-none')
                    .find('pre').html(JSON.stringify(
                        $('#jquery-query-builder').queryBuilder('getRules', {
                            get_flags: true,
                            skip_empty: true
                        }),
                        undefined, 2
                    ));
            });


            $('.get-rules').on('click', function () {
                const queryBuilderConfig = getQueryBuilderConfig();
                setQueryBuilderRules(queryBuilderConfig);
            });


            // production get rules from api endpoint
            function getQueryBuilderConfig() {
                return {
                    condition: 'AND',
                    flags: {
                        condition_readonly: false
                    },
                    data: {
                        root: true
                    },
                    rules: [
                        {
                            id: 'firstname',
                            operator: 'equal',
                            value: 'Emlynne'
                        },
                        {
                            id: 'city',
                            field: 'City',
                            operator: 'equal',
                            value: 'Spokane'
                        }
                    ]
                };
            }

            function setQueryBuilderRules(config) {
                $('#jquery-query-builder').queryBuilder('setRules', config);
            }

    });



    </script>
}
<div class="jumbotron">
    <h1>Dynamic Linq Query Builder Example</h1>
    <p class="lead">Dynamically filter object collections based on complex queries at runtime.</p>
</div>

<div class="row">
    <div class="col-12 p-4">
        <h2>Build Filters</h2>
        <div id="jquery-query-builder"></div>
        <button class="btn btn-warning set-filters" id="applyFilter">Apply Filter</button>
    </div>

    <div class="btn-group">
        <button class="btn btn-default" disabled>Set:</button>
        <button class="btn btn-success get-rules">From JSON</button>
    </div>
    <div class="btn-group">
        <button class="btn btn-default" disabled>Get:</button>
        <button class="btn btn-primary parse-json">JSON</button>
    </div>

    <hr />
</div>

<div class="row mt-2">
    <div class="col-6">
        <h2>User Data</h2>
        <table id="data-table">
            <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Birthday</th>
                <th>Deceased</th>
                <th>Address</th>
                <th>City</th>
                <th>State</th>
                <th>Zip Code</th>
            </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <div class="col-6">
        <div id="result" class="hide bg-white">
            <h3>Output</h3>
            <pre></pre>
        </div>
    </div>
</div>